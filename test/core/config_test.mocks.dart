// Mocks generated by Mockito 5.0.7 from annotations
// in movie_colony/test/core/config_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:ui' as _i4;

import 'package:firebase_remote_config/firebase_remote_config.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeDateTime extends _i1.Fake implements DateTime {}

class _FakeRemoteConfigSettings extends _i1.Fake
    implements _i2.RemoteConfigSettings {}

class _FakeRemoteConfigValue extends _i1.Fake implements _i2.RemoteConfigValue {
}

/// A class which mocks [RemoteConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteConfig extends _i1.Mock implements _i2.RemoteConfig {
  MockRemoteConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  DateTime get lastFetchTime =>
      (super.noSuchMethod(Invocation.getter(#lastFetchTime),
          returnValue: _FakeDateTime()) as DateTime);
  @override
  _i2.LastFetchStatus get lastFetchStatus =>
      (super.noSuchMethod(Invocation.getter(#lastFetchStatus),
          returnValue: _i2.LastFetchStatus.success) as _i2.LastFetchStatus);
  @override
  _i2.RemoteConfigSettings get remoteConfigSettings => (super.noSuchMethod(
      Invocation.getter(#remoteConfigSettings),
      returnValue: _FakeRemoteConfigSettings()) as _i2.RemoteConfigSettings);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i3.Future<void> setConfigSettings(
          _i2.RemoteConfigSettings? remoteConfigSettings) =>
      (super.noSuchMethod(
          Invocation.method(#setConfigSettings, [remoteConfigSettings]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> fetch({Duration? expiration = const Duration(hours: 12)}) =>
      (super.noSuchMethod(
          Invocation.method(#fetch, [], {#expiration: expiration}),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<bool> activateFetched() =>
      (super.noSuchMethod(Invocation.method(#activateFetched, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<void> setDefaults(Map<String, dynamic>? defaults) =>
      (super.noSuchMethod(Invocation.method(#setDefaults, [defaults]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  String getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key]), returnValue: '')
          as String);
  @override
  int getInt(String? key) =>
      (super.noSuchMethod(Invocation.method(#getInt, [key]), returnValue: 0)
          as int);
  @override
  double getDouble(String? key) => (super
          .noSuchMethod(Invocation.method(#getDouble, [key]), returnValue: 0.0)
      as double);
  @override
  bool getBool(String? key) => (super
          .noSuchMethod(Invocation.method(#getBool, [key]), returnValue: false)
      as bool);
  @override
  _i2.RemoteConfigValue getValue(String? key) =>
      (super.noSuchMethod(Invocation.method(#getValue, [key]),
          returnValue: _FakeRemoteConfigValue()) as _i2.RemoteConfigValue);
  @override
  Map<String, _i2.RemoteConfigValue> getAll() =>
      (super.noSuchMethod(Invocation.method(#getAll, []),
              returnValue: <String, _i2.RemoteConfigValue>{})
          as Map<String, _i2.RemoteConfigValue>);
  @override
  void addListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [RemoteConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteConfig2 extends _i1.Mock implements _i2.RemoteConfig {
  @override
  DateTime get lastFetchTime =>
      (super.noSuchMethod(Invocation.getter(#lastFetchTime),
          returnValue: _FakeDateTime()) as DateTime);
  @override
  _i2.LastFetchStatus get lastFetchStatus =>
      (super.noSuchMethod(Invocation.getter(#lastFetchStatus),
          returnValue: _i2.LastFetchStatus.success) as _i2.LastFetchStatus);
  @override
  _i2.RemoteConfigSettings get remoteConfigSettings => (super.noSuchMethod(
      Invocation.getter(#remoteConfigSettings),
      returnValue: _FakeRemoteConfigSettings()) as _i2.RemoteConfigSettings);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i3.Future<void> setConfigSettings(
          _i2.RemoteConfigSettings? remoteConfigSettings) =>
      (super.noSuchMethod(
          Invocation.method(#setConfigSettings, [remoteConfigSettings]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> fetch({Duration? expiration = const Duration(hours: 12)}) =>
      (super.noSuchMethod(
          Invocation.method(#fetch, [], {#expiration: expiration}),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<bool> activateFetched() =>
      (super.noSuchMethod(Invocation.method(#activateFetched, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<void> setDefaults(Map<String, dynamic>? defaults) =>
      (super.noSuchMethod(Invocation.method(#setDefaults, [defaults]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  String getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key]), returnValue: '')
          as String);
  @override
  int getInt(String? key) =>
      (super.noSuchMethod(Invocation.method(#getInt, [key]), returnValue: 0)
          as int);
  @override
  double getDouble(String? key) => (super
          .noSuchMethod(Invocation.method(#getDouble, [key]), returnValue: 0.0)
      as double);
  @override
  bool getBool(String? key) => (super
          .noSuchMethod(Invocation.method(#getBool, [key]), returnValue: false)
      as bool);
  @override
  _i2.RemoteConfigValue getValue(String? key) =>
      (super.noSuchMethod(Invocation.method(#getValue, [key]),
          returnValue: _FakeRemoteConfigValue()) as _i2.RemoteConfigValue);
  @override
  Map<String, _i2.RemoteConfigValue> getAll() =>
      (super.noSuchMethod(Invocation.method(#getAll, []),
              returnValue: <String, _i2.RemoteConfigValue>{})
          as Map<String, _i2.RemoteConfigValue>);
  @override
  void addListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
